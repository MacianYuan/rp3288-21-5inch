/*
 * Copyright (C) Intel 2016
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated by update_tests.sh
 * run source update_tests.sh to update
 */

#include <gtest/gtest.h>
#include "tests.h"

TEST(attachments, get_info) {
  ASSERT_EQ(0, test_attachments_get_info());
}

TEST(attachments, pass_existing) {
  ASSERT_EQ(0, test_attachments_pass_existing());
}

TEST(attachments, pass_non_existing) {
  ASSERT_EQ(0, test_attachments_pass_non_existing());
}

TEST(attachments, copy_existing) {
  ASSERT_EQ(0, test_attachments_copy_existing());
}

TEST(attachments, copy_non_existing) {
  ASSERT_EQ(0, test_attachments_copy_non_existing());
}

TEST(attachments, copy_invalid_dest) {
  ASSERT_EQ(0, test_attachments_copy_invalid_dest());
}

TEST(attachments, exec_success) {
  ASSERT_EQ(0, test_attachments_exec_success());
}

TEST(attachments, exec_bad_command) {
  ASSERT_EQ(0, test_attachments_exec_bad_command());
}

TEST(attachments, exec_bad_output) {
  ASSERT_EQ(0, test_attachments_exec_bad_output());
}

TEST(attachments, exec_long_command) {
  ASSERT_EQ(0, test_attachments_exec_long_command());
}

TEST(attachments, replace_cap) {
  ASSERT_EQ(0, test_attachments_replace_cap());
}

TEST(data, replace_complete) {
  ASSERT_EQ(0, test_data_replace_complete());
}

TEST(data, replace_incomplete) {
  ASSERT_EQ(0, test_data_replace_incomplete());
}

TEST(pattern, invalid) {
  ASSERT_EQ(0, test_pattern_invalid());
}

TEST(pattern, valid) {
  ASSERT_EQ(0, test_pattern_valid());
}

TEST(eventwatch, invalid) {
  ASSERT_EQ(0, test_eventwatch_invalid());
}

TEST(eventwatch, invalid_bad_start) {
  ASSERT_EQ(0, test_eventwatch_invalid_bad_start());
}

TEST(eventwatch, accept_one) {
  ASSERT_EQ(0, test_eventwatch_accept_one());
}

TEST(eventwatch, flush_eof) {
  ASSERT_EQ(0, test_eventwatch_flush_eof());
}

TEST(eventwatch, history) {
  ASSERT_EQ(0, test_eventwatch_history());
}

TEST(eventwatch, kick_noisy) {
  ASSERT_EQ(0, test_eventwatch_kick_noisy());
}

TEST(eventwatch, gen_1) {
  ASSERT_EQ(0, test_eventwatch_gen_1());
}

TEST(eventwatch, gen_2) {
  ASSERT_EQ(0, test_eventwatch_gen_2());
}

TEST(eventwatch, kick_lazy) {
  ASSERT_EQ(0, test_eventwatch_kick_lazy());
}

TEST(eventwatch, suspend_interval) {
  ASSERT_EQ(0, test_eventwatch_suspend_interval());
}

TEST(eventwatch, suspend_interval_keep) {
  ASSERT_EQ(0, test_eventwatch_suspend_interval_keep());
}

TEST(eventwatch, vlidation_pass) {
  ASSERT_EQ(0, test_eventwatch_vlidation_pass());
}

TEST(eventwatch, vlidation_pass_twice) {
  ASSERT_EQ(0, test_eventwatch_vlidation_pass_twice());
}

TEST(eventwatch, vlidation_fail) {
  ASSERT_EQ(0, test_eventwatch_vlidation_fail());
}

TEST(eventwatch, no_vlidation) {
  ASSERT_EQ(0, test_eventwatch_no_vlidation());
}
